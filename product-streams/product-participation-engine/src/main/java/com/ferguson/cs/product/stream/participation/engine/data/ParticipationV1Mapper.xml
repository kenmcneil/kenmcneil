<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ferguson.cs.product.stream.participation.engine.data.ParticipationV1Mapper">

	<update id="updateExistingLastOnSaleBasePrices" parameterType="Date">
		-- Update the base price and sale date of pricebook prices that already exist in the table.
		UPDATE
			lastOnSale
		SET
			lastOnSale.basePrice = pbCost.basePrice ,
			lastOnSale.saleDate = #{processingDate},
			lastOnSale.wasPrice = pbCost.wasPrice
		FROM
			mmc.product.participationLastOnSale AS lastOnSale
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = lastOnSale.uniqueId
		JOIN
			mmc.dbo.pricebook_cost AS pbCost
			ON pbCost.uniqueId = lastOnSale.uniqueId
			AND pbCost.pricebookId = lastOnSale.pricebookId
		JOIN
			mmc.product.participationCalculatedDiscount AS discount
			ON discount.participationId = oc.oldParticipationId
			AND discount.pricebookId = pbCost.pricebookId
	</update>

	<insert id="insertMissingLastOnSaleBasePrices" parameterType="Date">
		-- Record the base price for prices going off sale, for pricebook prices
		-- that don't exist in the last on sale table.
		INSERT INTO
			mmc.product.participationLastOnSale (pricebookId, uniqueId, saleDate, basePrice, wasPrice)
		SELECT
			pbCost.pricebookId, pbCost.uniqueId, #{processingDate}, pbCost.basePrice, pbCost.wasPrice
		FROM
			mmc.dbo.pricebook_cost AS pbCost
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = pbCost.uniqueId
		JOIN
			mmc.product.participationCalculatedDiscount AS discount
			ON discount.participationId = oc.oldParticipationId
			AND discount.pricebookId = pbCost.pricebookId
		LEFT JOIN
			mmc.product.participationLastOnSale AS los
			ON los.uniqueId = pbCost.uniqueId
			AND los.pricebookId = pbCost.pricebookId
		WHERE
			los.uniqueId IS NULL
	</insert>

	<update id="takePricesOffSaleAndApplyPendingBasePriceUpdates" parameterType="int">
		-- Set cost to a pending base price if present, else to basePrice.
		-- Set basePrice to a pending base price if present.
		-- Set participationId and userId.
		-- The cost and basePrice columns are updated in this one query in order to prevent multiple log entries with no price change.
		UPDATE
			pbCost
		SET
			pbCost.cost = IIF(lbp.basePrice != pbCost.basePrice, lbp.basePrice, pbCost.basePrice),
			pbCost.basePrice = IIF(lbp.basePrice != pbCost.basePrice, lbp.basePrice, pbCost.basePrice),
			pbCost.participationId = 0,
			pbCost.wasPrice = 0.00,
			pbCost.userId = #{userId}
		FROM
			MMC.dbo.pricebook_cost AS pbCost
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = pbCost.uniqueId
		JOIN
			mmc.product.participationCalculatedDiscount AS discount
			ON discount.participationId = oc.oldParticipationId
			AND discount.pricebookId = pbCost.pricebookId
		JOIN
			mmc.product.latestBasePrice AS lbp
			ON lbp.uniqueId = pbCost.uniqueId
			AND lbp.pricebookId = pbCost.pricebookId
	</update>

	<update id="applyNewCalculatedDiscounts" parameterType="map">
		-- Apply calculated discounts to products becoming owned by a Participation.
		-- Also sets the basePrice to any applicable last-on-sale base prices, and uses those
		-- for the calculations. Rounds the discounted price down to 2 decimal places.
		DECLARE @wasPrice decimal(18,2);
		UPDATE
			pbCost
		SET
			@wasPrice = COALESCE(los.wasPrice, wasPrice.wasPrice, 0.00),
			pbcost.cost = ROUND(IIF(
										discount.isPercent = 1,
										COALESCE(los.basePrice, pbCost.basePrice) * discount.changeValue,
										COALESCE(los.basePrice, pbCost.basePrice) + discount.changeValue
									), 2),
			pbCost.basePrice = COALESCE(los.basePrice, pbCost.basePrice),
			pbCost.participationId = discount.participationId,
			pbCost.userId = #{userId},
			pbCost.wasPrice = @wasPrice
		FROM
			MMC.dbo.pricebook_cost AS pbCost
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = pbCost.uniqueId
		JOIN
			mmc.product.participationCalculatedDiscount AS discount
			ON discount.participationId = oc.newParticipationId
			AND discount.pricebookId = pbCost.pricebookId
		LEFT JOIN
			mmc.dbo.pricebookwasprice AS wasPrice
			ON wasPrice.uniqueId = pbCost.uniqueId
		LEFT JOIN
			mmc.product.participationLastOnSale AS los
			ON los.uniqueId = pbCost.uniqueId
			AND los.pricebookId = pbCost.pricebookId
			AND DATEDIFF_BIG(minute, los.saleDate, #{processingDate}) &lt; #{coolOffPeriodMinutes}
	</update>

	<insert id="insertParticipationCalculatedDiscounts">
		INSERT INTO mmc.product.participationCalculatedDiscount (
		participationId,
		pricebookId,
		changeValue,
		isPercent,
		templateId
		)
		VALUES
		<foreach collection="calculatedDiscounts" item="calculatedDiscount" index="index" open="(" separator="),(" close=")">
			#{calculatedDiscount.participationId},
			#{calculatedDiscount.pricebookId},
			#{calculatedDiscount.changeValue},
			#{calculatedDiscount.isPercent},
			#{calculatedDiscount.templateId}
		</foreach>
	</insert>

	<delete id="deleteParticipationCalculatedDiscounts" parameterType="int">
		DELETE FROM
			mmc.product.participationCalculatedDiscount
		WHERE
			participationId = #{participationId}
	</delete>

	<insert id="insertParticipationCalculatedDiscountsHistory">
		INSERT INTO logs.dbo.participationCalculatedDiscountHistory (
			participationItemPartialHistoryId,
			pricebookId,
			changeValue,
			isPercent,
			templateId
		)
		VALUES
		<foreach collection="calculatedDiscounts" item="calculatedDiscount" index="index" open="(" separator="),(" close=")">
			#{partialHistoryId},
			#{calculatedDiscount.pricebookId},
			#{calculatedDiscount.changeValue},
			#{calculatedDiscount.isPercent},
			#{calculatedDiscount.templateId}
		</foreach>
	</insert>
</mapper>
