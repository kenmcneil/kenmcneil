<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ferguson.cs.product.stream.participation.engine.data.ParticipationCoreMapper">

	<select id="getParticipationIsActive" parameterType="int" resultType="Boolean">
		SELECT
			isActive
		FROM
			mmc.product.participationItemPartial
		WHERE
			participationId = #{participationId}
	</select>

	<update id="setParticipationIsActive" parameterType="map">
		UPDATE
			mmc.product.participationItemPartial
		SET
			isActive = #{isActive}
		WHERE
			participationId = #{participationId}
	</update>

	<update id="updateOwnerChangesForDeactivation" parameterType="int">
		-- Must set isActive=0 on the deactivating participation first.
		TRUNCATE TABLE tempData.participation.participationOwnerChange;
		WITH newOwner AS (
			-- find new owners for owned products in P
			-- products that are becoming un-owned are not returned
			SELECT TOP (1) WITH TIES
				allpp.uniqueId,
				allpp.participationId
			FROM
				mmc.product.participationProduct allpp
			JOIN
				mmc.product.participationProduct AS pp
				ON pp.uniqueId = allpp.uniqueId
				AND pp.participationId = #{participationId}
				AND pp.isOwner = 1
			JOIN
				mmc.product.participationItemPartial AS allp
				ON allp.participationId = allpp.participationId
				AND allp.isActive = 1
			ORDER BY
				ROW_NUMBER() OVER(PARTITION BY allpp.uniqueId ORDER BY allp.startDate DESC)
		)
		INSERT INTO tempData.participation.participationOwnerChange
		SELECT
			uniqueId,
			#{participationId} AS oldParticipationId,
			newOwner.participationId
		FROM
			newOwner;
		INSERT INTO tempData.participation.participationOwnerChange
		SELECT
			pp.uniqueId AS uniqueId,
			#{participationId} AS oldParticipationId,
			NULL AS newParticipationId
		FROM
			mmc.product.participationProduct AS pp
		JOIN
			mmc.product.participationItemPartial AS p
			ON p.participationId = pp.participationId
		LEFT JOIN
			tempData.participation.participationOwnerChange as poc
			ON poc.uniqueId = pp.uniqueId
		WHERE
			pp.participationId = #{participationId}
			AND pp.isOwner = 1
			AND poc.uniqueId IS NULL
	</update>

	<update id="updateOwnerChangesForActivation" parameterType="int">
		-- Must set isActive=1 on the activating participation first.
		TRUNCATE TABLE tempData.participation.participationOwnerChange;
		WITH newOwner AS (
			-- find products in P that will be owned by P (activating products)
			SELECT TOP (1) WITH TIES
				allpp.uniqueId,
				allpp.participationId
			FROM
				mmc.product.participationProduct allpp
			JOIN
				mmc.product.participationProduct AS pp
				ON pp.uniqueId = allpp.uniqueId
				AND pp.participationId = #{participationId}
			JOIN
				mmc.product.participationItemPartial AS allp
				ON allp.participationId = allpp.participationId
				AND allp.isActive = 1
			ORDER BY
				ROW_NUMBER() OVER(PARTITION BY allpp.uniqueId ORDER BY allp.startDate DESC)
		)
		INSERT INTO tempData.participation.participationOwnerChange
		SELECT
			newOwner.uniqueId,
			pp.participationId AS oldParticipationId,
			newOwner.participationId AS newParticipationId
		FROM
			newOwner
		JOIN
			mmc.product.participationItemPartial AS p
			ON p.participationId = newOwner.participationId
		LEFT JOIN
			mmc.product.participationProduct AS pp
			ON pp.uniqueId = newOwner.uniqueId
			AND pp.participationId != newOwner.participationId
			AND pp.isOwner = 1
		WHERE
			newOwner.participationId = #{participationId}
	</update>

	<update id="addProductOwnershipForNewOwners">
		-- set ownership flag for products becoming owned by a different participation
		UPDATE
			owner
		SET
			isOwner = 1
		FROM
			mmc.product.participationProduct AS owner
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = owner.uniqueId
			AND oc.newParticipationId = owner.participationId
		WHERE
			owner.isOwner = 0
	</update>

	<update id="removeProductOwnershipForOldOwners">
		-- Remove ownership from the old owners of products that the activating participation now owns.
		-- This is not needed for a deactivating participation since its participationProduct rows will be deleted.
		UPDATE
			owner
		SET
			owner.isOwner = 0
		FROM
			mmc.product.participationProduct AS owner
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = owner.uniqueId
			AND oc.oldParticipationId = owner.participationId
		WHERE
			owner.isOwner = 1
	</update>

	<update id="activateAndDeactivateProductSaleIds">
		UPDATE
			sale
		SET
			sale.saleId = COALESCE(p.saleId, 0),
			sale.participationId = COALESCE(p.participationId, 0)
		FROM
			mmc.product.sale AS sale
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = sale.uniqueId
		LEFT JOIN
			mmc.product.participationItemPartial AS p
			ON p.participationId = oc.newParticipationId
	</update>

	<update id="updateProductModifiedDates" parameterType="map">
		UPDATE
			modified
		SET
			modified.modifiedDate = #{processingDate},
			modified.modifiedBy = users.username
		FROM
			mmc.product.modified
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = modified.uniqueId
		JOIN
			omc.dbo.users AS users
			ON users.userId = #{userId}
	</update>

	<delete id="deleteParticipationProducts" parameterType="int">
		DELETE FROM
			mmc.product.participationProduct
		WHERE
			participationId = #{participationId}
	</delete>

	<delete id="deleteParticipationItemPartial" parameterType="int">
		DELETE FROM
			mmc.product.participationItemPartial
		WHERE
			participationId = #{participationId}
	</delete>

	<select id="getNextParticipationPendingActivation" parameterType="map" resultType="ParticipationItemPartial">
		SELECT TOP 1
			participationId,
			saleId,
			startDate,
			endDate,
			lastModifiedUserId,
			isActive,
			contentTypeId,
			isCoupon,
			shouldBlockDynamicPricing
		FROM
			mmc.product.participationItemPartial
		WHERE
			isActive = 0
			AND (startDate &lt;= #{processingDate} OR startDate IS NULL)
			AND (endDate > #{processingDate} OR endDate IS NULL)
		<if test="minParticipationId != null">
			AND participationId >= #{minParticipationId}
		</if>
		ORDER BY startDate
	</select>

	<select id="getNextExpiredParticipation" parameterType="map" resultType="ParticipationItemPartial">
		SELECT TOP 1
			participationId,
			saleId,
			startDate,
			endDate,
			lastModifiedUserId,
			isActive,
			contentTypeId,
			isCoupon,
			shouldBlockDynamicPricing
		FROM
			mmc.product.participationItemPartial
		WHERE
			endDate IS NOT NULL
			AND endDate &lt; #{processingDate}
		<if test="minParticipationId != null">
			AND participationId >= #{minParticipationId}
		</if>
		ORDER BY endDate
	</select>

	<insert id="upsertParticipationItemPartial">
		IF EXISTS (
				SELECT id
				FROM mmc.product.participationItemPartial
				WHERE participationId = #{participationId}
			)
			BEGIN
				UPDATE
					mmc.product.participationItemPartial
				SET
					saleId = #{saleId},
					startDate = #{startDate, jdbcType=TIMESTAMP},
					endDate = #{endDate, jdbcType=TIMESTAMP},
					lastModifiedUserId = #{lastModifiedUserId},
					isActive = #{isActive},
					contentTypeId = #{contentTypeId},
					isCoupon = COALESCE(#{isCoupon},0),
					shouldBlockDynamicPricing = COALESCE(#{shouldBlockDynamicPricing}, 0)
				WHERE
					participationId = #{participationId}
			END
		ELSE
			BEGIN
				INSERT INTO mmc.product.participationItemPartial (
					participationId,
					saleId,
					startDate,
					endDate,
					lastModifiedUserId,
					isActive,
					contentTypeId,
					isCoupon,
					shouldBlockDynamicPricing
				)
				VALUES (
						   #{participationId},
						   #{saleId},
						   #{startDate, jdbcType=TIMESTAMP},
						   #{endDate, jdbcType=TIMESTAMP},
						   #{lastModifiedUserId},
						   #{isActive},
						   #{contentTypeId},
						   COALESCE(#{isCoupon},0),
						   COALESCE(#{shouldBlockDynamicPricing}, 0)
					   );
			END
	</insert>

	<insert id="insertParticipationProducts" parameterType="map">
		DECLARE @participationId INT = #{participationId}
		DECLARE @uniqueidList VARCHAR(MAX) = #{csvUniqueIds}

		INSERT INTO mmc.product.participationProduct (
			participationId, uniqueId, isOwner
		)
		SELECT
			@participationId as participationId,
			value as uniqueId,
			0
		FROM
			string_split(@uniqueidList,',');
	</insert>

	<select id="getHighestParticipationHistoryVersionId" parameterType="int" resultType="int">
		SELECT
			MAX(versionId)
		FROM
			logs.dbo.participationItemPartialHistory
		WHERE
			participationId = #{participationId}
	</select>
	(int participationId,int currentVersionId);
	<select id="getparticipationItemPartialHistoryId" parameterType="int" resultType="int">
		SELECT
			id
		FROM
			logs.dbo.participationItemPartialHistory
		WHERE
			participationId = #{participationId}
			AND versionId = #{versionId}
	</select>
	<insert id="insertParticipationItemPartialHistory" parameterType="map">
		INSERT INTO
			logs.dbo.participationItemPartialHistory (
				participationId,
				versionId,
				saleId,
				startDate,
				endDate,
				lastModifiedUserId,
				contentTypeId,
				isCoupon,
				shouldBlockDynamicPricing,
				startOrActivatedDate,
				endOrDeactivatedDate,
				woodchipperDate
			)
			VALUES (
				#{participationId},
				#{versionId},
				#{startDate, jdbcType=TIMESTAMP},
				#{endDate, jdbcType=TIMESTAMP},
				#{lastModifiedUserId},
				#{contentTypeId},
				COALESCE(#{isCoupon},0),
				COALESCE(#{shouldBlockDynamicPricing}, 0),
				#{startDate, jdbcType=TIMESTAMP},
				#{endDate, jdbcType=TIMESTAMP},
				#{endDate, jdbcType=TIMESTAMP}
			)
	</insert>

	<insert id="insertParticipationProductsHistory" parameterType="map">
		DECLARE @participationItemPartialHistoryId INT = #{participationItemPartialHistoryId}
		DECLARE @uniqueidList VARCHAR(MAX) = #{csvUniqueIds}

		INSERT INTO
			logs.dbo.participationProductHistory (
				participationItemPartialHistoryId,
				uniqueId,
				isOwner
			)
		SELECT
			@participationItemPartialHistoryId as participationItemPartialHistoryId,
			value as uniqueId,
			0
		FROM
			string_split(@uniqueidList,',');
	</insert>

	<update id="updateActivatedHistory" parameterType="map">
		UPDATE
			logs.dbo.participationItemPartialHistory
		SET
			wasActivated = 1,
			startOrActivatedDate = #{processingDate, jdbcType=TIMESTAMP}
		WHERE
			participationId = #{participationId}
			AND versionId = (
				SELECT
					MAX(versionId)
				FROM
					 logs.dbo.participationItemPartialHistory
				WHERE
					  participationId = #{participationId}
				)
	</update>

	<update id="updateDeactivatedHistory" parameterType="map">
		UPDATE
			logs.dbo.participationItemPartialHistory
		SET
			wasDeactivated = 1,
			endOrDeactivatedDate = #{processingDate, jdbcType=TIMESTAMP}
		WHERE
			participationId = #{participationId}
		  AND versionId = (
			SELECT
				MAX(versionId)
			FROM
				logs.dbo.participationItemPartialHistory
			WHERE
				participationId = #{participationId}
		)
	</update>

	<update id="updateWoodchipperDates" parameterType="map">
		UPDATE
			logs.dbo.participationItemPartialHistory
		SET
			woodchipperDate = #{processingDate, jdbcType=TIMESTAMP}
		WHERE
			participationId = #{participationId}
	</update>

</mapper>
