<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ferguson.cs.product.stream.participation.engine.data.ParticipationItemizedV1Mapper">

	<insert id="insertParticipationItemizedDiscounts" parameterType="map">
		DECLARE @participationId INT = #{participationId}
		DECLARE @discountRows VARCHAR(MAX) = #{csDiscounts}
		DECLARE @newline VARCHAR(1) = CHAR(10)

		INSERT INTO mmc.product.participationItemizedDiscount (
			participationId,
			uniqueId,
			pricebookId,
			price
		)
		SELECT
			@participationId,
			--first string up to comma
			SUBSTRING(value, 1, CHARINDEX(',', value, 0) - 1) AS uniqueId,
			--string between commmas
			SUBSTRING(  value,
						CHARINDEX(',',value, 0)+1,
						CHARINDEX(',',value, (CHARINDEX(',',value, 0)+1)) - (CHARINDEX(',',value, 0)+1)
				) AS pricebookId,
			--last string
			SUBSTRING(	value,
						  (CHARINDEX(',',value, (CHARINDEX(',',value, 0)+1))+1),
						  LEN(value)
				) AS price
		FROM
			STRING_SPLIT(@discountRows, @newline)
	</insert>

	<update id="applyNewItemizedDiscounts" parameterType="map">
		-- Apply itemizedDiscount prices to products becoming owned by a Participation.
		-- Also sets the basePrice to any applicable last-on-sale base prices
		UPDATE
			pbCost
		SET
			pbCost.cost = discount.price,
			pbCost.basePrice = COALESCE(los.basePrice, pbCost.basePrice),
			pbCost.participationId = discount.participationId,
			pbCost.userId = #{userId},
		    pbCost.wasPrice = COALESCE(losPB1.wasPrice, wasPrice.wasPrice, 0)
		FROM
			MMC.dbo.pricebook_cost AS pbCost
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = pbCost.uniqueId
		JOIN
			mmc.product.participationItemizedDiscount AS discount
			ON discount.participationId = oc.newParticipationId
			AND discount.uniqueId = pbCost.uniqueId
			AND discount.pricebookId = pbCost.pricebookId
		JOIN
			mmc.dbo.pricebookwasprice AS wasPrice
			ON wasPrice.uniqueId = pbCost.uniqueId
		LEFT JOIN
			mmc.product.participationLastOnSale AS los
			ON los.uniqueId = pbCost.uniqueId
			AND los.pricebookId = pbCost.pricebookId
			AND DATEDIFF_BIG(minute, los.saleDate, #{processingDate}) &lt; #{coolOffPeriodMinutes}
		LEFT JOIN
			mmc.product.participationLastOnSale AS losPB1
			ON losPB1.uniqueId = pbCost.uniqueId
			AND losPB1.pricebookId = 1
			AND DATEDIFF_BIG(minute, losPB1.saleDate, #{processingDate}) &lt; #{coolOffPeriodMinutes}
-- TODO you are not using this table?
-- 		JOIN
-- 			mmc.dbo.pricebook_cost AS PB1Cost
-- 			ON pbCost.uniqueId = PB1Cost.uniqueId
-- 			AND PB1Cost = 1
	</update>

	<update id="updateExistingLastOnSaleBasePrices" parameterType="Date">
		-- Update the base price and sale date of pricebook prices that already exist in the table.
		UPDATE
			lastOnSale
		SET
			lastOnSale.basePrice = pbCost.basePrice,
			lastOnSale.saleDate = #{processingDate},
			lastOnSale.wasPrice = pbCost.wasPrice
		FROM
			mmc.product.participationLastOnSale AS lastOnSale
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = lastOnSale.uniqueId
		JOIN
			mmc.dbo.pricebook_cost AS pbCost
			ON pbCost.uniqueId = lastOnSale.uniqueId
			AND pbCost.pricebookId = lastOnSale.pricebookId
		JOIN
			mmc.product.participationItemizedDiscount AS discount
			ON discount.participationId = oc.oldParticipationId
			AND discount.uniqueId = pbCost.uniqueId
			AND discount.pricebookId = pbCost.pricebookId
	</update>

	<insert id="insertMissingLastOnSaleBasePrices" parameterType="Date">
		-- Record the base price for prices going off sale, for pricebook prices
		-- that don't exist in the last on sale table.
		INSERT INTO
			mmc.product.participationLastOnSale (pricebookId, uniqueId, saleDate, basePrice, wasPrice)
		SELECT
			pbCost.pricebookId, pbCost.uniqueId, #{processingDate}, pbCost.basePrice, pbCost.wasPrice
		FROM
			mmc.dbo.pricebook_cost AS pbCost
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = pbCost.uniqueId
		JOIN
			mmc.product.participationItemizedDiscount AS discount
			ON discount.participationId = oc.oldParticipationId
			AND discount.uniqueId = pbCost.uniqueId
			AND discount.pricebookId = pbCost.pricebookId
		LEFT JOIN
			mmc.product.participationLastOnSale AS los
			ON los.uniqueId = pbCost.uniqueId
			AND los.pricebookId = pbCost.pricebookId
		WHERE
			los.uniqueId IS NULL
	</insert>
	<update id="takePricesOffSaleAndApplyPendingBasePriceUpdates" parameterType="int">
		-- Set cost to a pending base price if present, else to basePrice.
		-- Set basePrice to a pending base price if present.
		-- Set participationId and userId.
		-- The cost and basePrice columns are updated in this one query in order to prevent multiple log entries with no price change.
		UPDATE
			pbCost
		SET
			pbCost.cost = IIF(lbp.basePrice != pbCost.basePrice, lbp.basePrice, pbCost.basePrice),
			pbCost.basePrice = IIF(lbp.basePrice != pbCost.basePrice, lbp.basePrice, pbCost.basePrice),
		    pbCost.wasPrice = 0.00,
			pbCost.participationId = 0,
			pbCost.userId = #{userId}
		FROM
			MMC.dbo.pricebook_cost AS pbCost
		JOIN
			tempData.participation.participationOwnerChange AS oc
			ON oc.uniqueId = pbCost.uniqueId
		JOIN
			mmc.product.participationItemizedDiscount AS discount
			ON discount.participationId = oc.oldParticipationId
			AND discount.uniqueId = pbCost.uniqueId
			AND discount.pricebookId = pbCost.pricebookId
		JOIN
			mmc.product.latestBasePrice AS lbp
			ON lbp.uniqueId = pbCost.uniqueId
			AND lbp.pricebookId = pbCost.pricebookId
	</update>

	<delete id="deleteParticipationItemizedDiscounts" parameterType="int">
		DELETE FROM mmc.product.participationItemizedDiscount
		WHERE participationId = #{participationId}
	</delete>
</mapper>