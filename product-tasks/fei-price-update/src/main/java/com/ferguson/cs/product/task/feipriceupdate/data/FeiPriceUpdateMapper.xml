<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ferguson.cs.product.task.feipriceupdate.data.FeiPriceUpdateMapper">

	<resultMap id="feiPriceUpdateDataMap" type="FeiPriceUpdateItem">
		<result column="uniqueId" property="uniqueId"/>
		<result column="mpid" property="mpid"/>
		<result column="price" property="price"/>
		<result column="baseCategoryId" property="baseCategoryId"/>
		<result column="manufacturerId" property="manufacturerId"/>
		<result column="umrpId" property="umrpId"/>
		<result column="feiOwnedProductId" property="feiOwnedProductId"/>
		<result column="feiOwnedActive" property="feiOwnedActive"/>
		<result column="pricebookId" property="pricebookId"/>	
		<result column="statusId" property="status"
				javaType="PriceUpdateStatus"
				typeHandler="com.ferguson.cs.product.task.feipriceupdate.data.IntMappedEnumTypeHandler"/>	
	</resultMap>
	
	<select id="getFeiPriceUpdateErrors" resultMap="feiPriceUpdateDataMap">
		SELECT
			uniqueId,
			mpid,
			price,
			pricebookId,
			statusId
		FROM tempData.dbo.${tempTableName}
		WHERE statusId != 0	order by statusId, uniqueId
	</select>
	
	<select id="getPriceUpdateProductDetails"  parameterType="FeiPriceUpdateItem" resultMap="feiPriceUpdateDataMap">
		select 
			p.uniqueId as uniqueId,
			bc.base_category_id as baseCategoryId,
			m.id as manufacturerId,
			umrp.id as umrpId,
			fei.productUniqueId as feiOwnedProductId,
			fei.active as feiOwnedActive
		from
			mmc.product.product p with(NOLOCK)
			INNER JOIN mmc.dbo.product_base_category bc WITH(NOLOCK) on p.uniqueId = bc.uniqueid
			INNER JOIN mmc.product.family pf WITH(NOLOCK) ON p.familyId = pf.id
			INNER JOIN mmc.dbo.manufacturer m WITH(NOLOCK) ON pf.manufacturerId = m.id
			LEFT OUTER JOIN mmc.dbo.manufacturerIsUMRP umrp WITH(NOLOCK) ON m.id = umrp.id
			LEFT OUTER JOIN mmc.product.pricingFeiOwned fei WITH(NOLOCK) ON p.uniqueId = fei.productUniqueId		
		WHERE p.uniqueId =#{uniqueId}
	</select>
	
	<insert id="createTempTable" parameterType="java.lang.String">
	  CREATE TABLE [tempData].[dbo].[${_parameter}]
	  ( 
	        [uniqueId] [int],
	       	[mpid] [int],
	        [price] [decimal](18,2),
	        [pricebookId] [int],
	        [preferredVendorCost] [decimal](18,2),
	        [statusId] [int],
	        [statusMsg] [varchar](100),
	        [margin] [decimal](18,4),
	        [priceCalculation] [varchar](32)
	  )
	</insert>
	
	<insert id="insertTempPriceUpdateRecord" parameterType="FeiPriceUpdateItem">
		INSERT INTO tempData.dbo.${tempTableName}
		(
			uniqueId,
			mpid,
			price,
			pricebookId,
			preferredVendorCost,
			statusId,
			statusMsg,
			margin,
			priceCalculation
		) VALUES (
			#{uniqueId},
			#{mpid},
			#{price},
			#{pricebookId},
			#{preferredVendorCost},
			#{status.intValue},
			#{statusMsg},
			#{margin},
			#{priceCalculation}
		)
	</insert>
	
	<update id="dropTempTable" parameterType="java.lang.String">
		DROP TABLE IF EXISTS tempData.dbo.${_parameter}
	</update>
	
	<!-- PDM Cost upload Job -->
	<insert id="insertCostUpdateJob" parameterType="CostUpdateJob" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO tempData.dbo.costUpdateJob(
			processType,
			jobName,
			userId,
			createdOn,
			processOn,
			status
		) VALUES (
			#{processType},
			#{jobName},
			#{userId},
			getDate(),
			#{processOn},
			#{status}
		)
	</insert>
	
	<!-- Insert temp table price update records into pricebookCostUpdates table in preparation for job execution -->
	<insert id="loadPriceBookCostUpdatesFromTempTable" parameterType="PricebookLoadCriteria" useGeneratedKeys="true" keyProperty="id">
		insert into tempData.dbo.pricebookCostUpdates (
			costUpdateJobId,
			uniqueId,
			pricebookId,
			cost,
			deletePricebookCost
			)
		select 
			#{jobId},
			uniqueId,
			pricebookId,
			price,
			#{deleteCost} 
		FROM tempData.dbo.${tempTableName}
		WHERE statusId = 0
	</insert>
	
	<select id="executePricebookUpdater" parameterType="int">
		exec mmc.dbo.dsp_pricebookCostUpdater @job = #{costUpdateJobId}
	</select>
	
	<update id="updateCostUpdateJob" parameterType="CostUpdateJob">
		UPDATE tempData.dbo.costUpdateJob
		<set>
			status = #{status},
			processOn = #{processOn}
		</set>
		<where>
			id = #{id}
		</where>
	</update>
	
	<resultMap id="CostUpdateJobMap" type="CostUpdateJob">
		<id column="id"  property="id" />
		<result column="processType" property="processType" />
		<result column="jobName" property="jobName" />
		<result column="userId" property="userId" /> 
		<result column="createdOn" property="createdOn" />
		<result column="processOn" property="processOn" />
		<result column="status" property="status" />
	</resultMap>
	
	<select id="getCostUpdateJob" parameterType="int" resultMap="CostUpdateJobMap">
		SELECT
			cuj.id,
			cuj.processType,
			cuj.jobName,
			cuj.userId,
			cuj.createdOn,
			cuj.processOn,
			cuj.status
		FROM 
			tempData.dbo.costUpdateJob cuj WITH (nolock)
		WHERE 
			cuj.id = #{costUpdateJobId}
	</select>
	
	<!-- mpid / uniqueId validation -->
	<select id="isValidMpidUniqueId" resultType="Boolean">
		SELECT CASE WHEN COUNT(uniqueId) > 0 then 1 else 0 end result 
		FROM
			product.feiMPID 
		WHERE 
			mpid = #{mpid} AND 
			uniqueId = #{uniqueId}
	</select>
	
	<select id="getPreferredVendorCost" resultType="Double">
		SELECT 
			vc.cost 		
		FROM 
			omc.dbo.vendor_cost vc WITH (NOLOCK)
		INNER JOIN 
			mmc.dbo.productPreferredVendor ppv WITH (NOLOCK) on vc.uniqueId = ppv.productUniqueid 
			AND  ppv.vendorUID = vc.vendorUID
		WHERE
			ppv.productUniqueId = #{uniqueId}
			AND pricedOptionID IS NULL
	</select>
	
	<select id="getFeiPromoProductUniqueIds" resultType="Integer">
		SELECT 
			DISTINCT fei.productuniqueid
		FROM mmc.product.pricingfeiowned fei (NOLOCK)
		    INNER JOIN mmc.product.product p (NOLOCK) ON fei.productuniqueid = p.uniqueid
			INNER JOIN mmc.product.status st on st.id = p.statusId
		    INNER JOIN mmc.product.feimpid mpid (NOLOCK) ON fei.productuniqueid = mpid.uniqueid
		    INNER JOIN mmc.dbo.productpreferredvendor AS ppv (NOLOCK) ON p.uniqueid = ppv.productuniqueid
		    INNER JOIN omc.dbo.vendor_cost vc (NOLOCK) ON ppv.productuniqueid = vc.uniqueid AND ppv.vendoruid = vc.vendoruid
		    INNER JOIN mmc.dbo.pricebook_cost pb (NOLOCK) ON p.uniqueid = pb.uniqueid
			INNER JOIN mmc.product.participationItemPartial AS partcp (NOLOCK) ON pb.participationId = partcp.participationId
				AND partcp.isActive = 1
			INNER JOIN mmc.product.participationProduct AS partProd (NOLOCK) ON pb.participationId = partProd.participationId 
				AND p.uniqueId = partProd.uniqueId AND partProd.isOwner = 1
		    LEFT JOIN mmc.product.participationCalculatedDiscount AS calcDisc (NOLOCK) ON pb.participationId = calcDisc.participationId
			LEFT JOIN mmc.product.participationItemizedDiscount AS lineItemDisc (NOLOCK) ON pb.participationId = lineItemDisc.participationId 
				AND pb.uniqueId = lineItemDisc.uniqueId
		WHERE vc.pricedoptionid IS NULL 
			AND pb.PriceBookId = 1
			AND st.status IN ('stock','nonstock')
			AND (calcDisc.changeValue IS NOT NULL OR lineItemDisc.price IS NOT NULL)
	</select>
</mapper>