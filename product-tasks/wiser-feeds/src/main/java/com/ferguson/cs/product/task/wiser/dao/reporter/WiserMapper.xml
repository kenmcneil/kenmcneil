<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ferguson.cs.product.task.wiser.dao.reporter.WiserMapper">
	<resultMap id="productDataMap" type="ProductData">
		<result column="productId" property="productId"/>
		<result column="compositeId" property="compositeId"/>
		<result column="uniqueId" property="uniqueId" />
		<result column="productTitle" property="productTitle" />
		<result column="finish" property="finish" />
		<result column="image" property="image" />
		<result column="description" property="description" />
		<result column="upc" property="upc" />
		<result column="manufacturer" property="manufacturer" />
		<result column="type" property="type" />
		<result column="mpn" property="mpn" />
		<result column="baseCategory" property="baseCategory" />
		<result column="businessCategoryName" property="businessCategoryName" />
		<result column="mapPrice" property="mapPrice"/>
		<result column="isMap" property="isMap" />
		<result column="inStock" property="inStock" />
		<result column="price" property="price" />
		<result column="cost" property="cost" />
		<result column="application" property="application" />
		<result column="isLtl" property="isLtl" />
		<result column="saleId" property="saleId" />
		<result column="dateAdded" property="dateAdded" />
		<result column="listPrice" property="listPrice" />
	</resultMap>

	<select id="getProductData" resultMap="productDataMap">
		SELECT DISTINCT
		fa.productId as 'productId',
		fa.id as 'compositeId',
		p.uniqueId as 'uniqueId',
		ti.title as 'productTitle',
		f.finish as 'finish',
		i.image as 'image',
		ISNULL(mvi.upc,u.upc ) as 'upc',
		m.Name as 'manufacturer',
		ty.type as 'type',
		mvi.MPN as 'mpn',
		bc.base_category as 'baseCategory',
		bsc.name as 'businessCategoryName',
		pm.map_price as 'mapPrice',
		IIF(pm.uniqueId IS NOT NULL, 1, 0) AS 'isMap',
		IIF(s.status = 'stock', 1, 0) AS 'inStock',
		pbco.cost AS 'price',
		vc.cost AS 'cost',
		a.application as 'application',
		IIF(sd.ltl IS NULL, 0, sd.ltl) as 'isLtl',
		sa.saleId as 'saleId',
		p.dateAdded as 'dateAdded',
		p.msrp as 'listPrice'
		FROM mmc.product.product p WITH (NOLOCK)
		INNER JOIN mmc.product.family fa WITH(NOLOCK)
		ON p.familyId = fa.id
		INNER JOIN mmc.product.title ti WITH(NOLOCK)
		ON fa.titleId = ti.id
		INNER JOIN mmc.product.finish f WITH(NOLOCK)
		ON p.finishId = f.id
		INNER JOIN mmc.dbo.Manufacturer m WITH(NOLOCK)
		ON fa.manufacturerId = m.ID
		INNER JOIN mmc.product.typeApplicationHandletype taht WITH(NOLOCK)
		ON fa.typeApplicationHandletypeId = taht.id
		INNER JOIN mmc.product.typeApplication ta WITH(NOLOCK)
		ON taht.typeApplicationId = ta.id
		INNER JOIN mmc.product.type ty WITH(NOLOCK)
		ON ta.typeId = ty.id
		INNER JOIN mmc.product.application a WITH(NOLOCK)
		ON ta.applicationId = a.id
		INNER JOIN mmc.product.status s WITH(NOLOCK)
		ON p.statusId = s.id
		INNER JOIN mmc.product.modified mo WITH(NOLOCK)
		ON p.uniqueId = mo.uniqueId
		INNER JOIN mmc.product.containerType ct WITH(NOLOCK)
		ON fa.containerTypeId = ct.id
		LEFT JOIN mmc.product.shippingDetail sd
		ON p.uniqueId = sd.uniqueId
		LEFT JOIN mmc.product.image i WITH(NOLOCK)
		ON p.imageId = i.id
		LEFT JOIN mmc.product.upcSku us WITH(NOLOCK)
		ON p.uniqueId = us.uniqueId
		LEFT JOIN mmc.product.upc u WITH(NOLOCK)
		ON us.upcId = u.id
		OUTER APPLY
		(
		SELECT TOP 1 productId, finish, Manufacturer, mvi.mpn, upc
		FROM omc.dbo.vendor_mapping mvi WITH (NOLOCK)
		WHERE mvi.mpn IS NOT NULL AND fa.productid = mvi.ProductID AND m.Name = mvi.Manufacturer AND f.finish = mvi.finish
		GROUP BY productId, finish, Manufacturer, mvi.mpn, upc
		) mvi
		LEFT JOIN mmc.dbo.product_base_category pbc WITH (NOLOCK)
		ON pbc.uniqueId = p.uniqueId
		LEFT JOIN mmc.dbo.base_category bc WITH (NOLOCK)
		ON bc.id = pbc.base_category_id
		LEFT JOIN omc.dbo.businessCategoryProduct bcp WITH (NOLOCK)
		ON bcp.productUniqueId = p.uniqueId
		LEFT JOIN omc.dbo.businessCategory bsc WITH (NOLOCK)
		ON bcp.businessCategoryId = bsc.id
		LEFT JOIN mmc.dbo.product_imap_flag pm WITH (NOLOCK)
		ON pm.uniqueId = p.uniqueId
		INNER JOIN mmc.dbo.PriceBook_Cost pbco WITH (NOLOCK)
		ON pbco.uniqueId = p.uniqueId
		AND pbco.priceBookId = 1
		INNER JOIN mmc.dbo.productPreferredVendor ppv WITH(NOLOCK)
		ON ppv.productUniqueId = p.uniqueId
		INNER JOIN omc.dbo.vendor_cost vc WITH(NOLOCK)
		ON vc.uniqueId = p.uniqueId
		AND vc.vendorUid = ppv.vendorUid
		AND vc.pricedOptionId IS NULL
		LEFT JOIN mmc.product.sale sa WITH(NOLOCK)
		ON p.uniqueId = sa.uniqueId
		WHERE ct.type = 'Product'
		ORDER BY p.uniqueId ASC
	</select>



	<resultMap id="productRevenueCategoryMap" type="ProductRevenueCategory">
		<result property="productUniqueId" column="productUniqueId"/>
		<result column="revenueCategory" property="revenueCategory"
				javaType="RevenueCategory"
				typeHandler="com.ferguson.cs.product.task.wiser.dao.IntMappedEnumTypeHandler"/>
	</resultMap>

	<select id="getProductRevenueCategorization" resultMap="productRevenueCategoryMap">
		with last_month as (select c.uniqueid, cast(round(sum(c.quantity*c.unitprice),2) as decimal(18,2)) as sales
		from omc.dbo.orders o (nolock)
		join omc.dbo.cart c (nolock) on c.cartid = o.cartnumber and c.siteid = o.siteid
		where o.orderdate between dateadd(day,-29,cast(getdate() as date)) and cast(getdate() as date)
		and o.status is not null
		and o.status not in ('amending','cancelled','paymenthold','risk')
		group by c.uniqueid),

		last_year as (select c.uniqueid, cast(round(sum(c.quantity*c.unitprice),2) as decimal(18,2)) as sales
		from omc.dbo.orders o (nolock)
		join omc.dbo.cart c (nolock) on c.cartid = o.cartnumber and c.siteid = o.siteid
		where o.orderdate between dateadd(day,-365,cast(getdate() as date)) and dateadd(day,-30,cast(getdate() as date))
		and o.status is not null
		and o.status not in ('amending','cancelled','paymenthold','risk')
		group by c.uniqueid),

		hct as (select p.uniqueid, p.manufacturer, bsc.name as business_cat, ly.sales as last_year_sales, lm.sales as last_month_sales,
		case when ly.sales is null and lm.sales is not null then lm.sales
		when ly.sales is not null and lm.sales is null then ly.sales/11
		when ly.sales is not null and lm.sales is not null then (ly.sales/11)+lm.sales
		else '0' end as hct_builder
		from mmc.dbo.product p (nolock)
		left join last_month lm on lm.uniqueid = p.uniqueId
		left join last_year ly on ly.uniqueid = p.uniqueId
		JOIN OMC.DBO.BUSINESSCATEGORYPRODUCT AS BSCP (NOLOCK) ON BSCP.PRODUCTUNIQUEID = P.UNIQUEID
		LEFT JOIN OMC.DBO.BUSINESSCATEGORY AS BSC (NOLOCK) ON BSC.ID = BSCP.BUSINESSCATEGORYID
		where bsc.name is not null),

		hct_calc as (select uniqueid, manufacturer, business_cat, cast(last_year_sales as decimal(18,2)) as last_year_sales, cast(last_month_sales as decimal(18,2)) as last_month_sales, cast(hct_builder as decimal(18,2)) as hct_calculation,
		rank() over(partition by business_cat, manufacturer order by hct_builder desc) as rank_hct,
		cast(sum(hct_builder) over (partition by business_cat, manufacturer) as decimal(18,2)) as sum_hct_calc,
		cast(sum(hct_builder) over(partition by manufacturer, business_cat order by manufacturer, business_cat, hct_builder desc rows between unbounded preceding and current row) as decimal(18,2)) as running_total
		from hct),

		hct_calc_lag as (
		select uniqueid, manufacturer, business_cat, last_year_sales, last_month_sales, hct_calculation, rank_hct, sum_hct_calc, running_total,
		cast(lag(running_total) over(partition by manufacturer, business_cat order by hct_calculation desc) as decimal (18,2)) as lag_running_total
		from hct_calc)

		select DISTINCT uniqueId productUniqueId, case when rank_hct = 1 and hct_calculation &gt; 0 then 3
		when rank_hct = 1 and hct_calculation = 0 then 1
		when rank_hct = 2 and hct_calculation &gt; 0 and lag_running_total/sum_hct_calc &gt; .66 then 2
		when rank_hct &gt; 1 and hct_calculation &gt; 0 and lag_running_total/sum_hct_calc &lt;= .33 then 3
		when rank_hct &gt; 1 and hct_calculation &gt; 0 and lag_running_total/sum_hct_calc &lt;= .66 and running_total/sum_hct_calc &gt; .33 then 2
		when rank_hct &gt; 1 and hct_calculation &gt; 0 and lag_running_total/sum_hct_calc &gt; .66 then 1
		when rank_hct &gt; 1 and hct_calculation = 0 then 1
		else 1
		end as revenueCategory
		from hct_calc_lag
	</select>

	<resultMap id="wiserPriceDataMap" type="WiserPriceData">
		<result property="sku" column="sku" />
		<result property="channel" column="channel"/>
		<result property="effectiveDate" column="effectiveDate"/>
		<result property="regularPrice" column="regularPrice"/>
	</resultMap>

	<select id="getWiserPriceData" resultMap="wiserPriceDataMap">
		<if test="date != null">
			DECLARE @startDate DATETIME = DATEADD(day, DATEDIFF(day, 0, #{date}), 0);
		</if>
		SELECT
		pbc.UniqueId AS 'sku',
		pbc.PriceBookId AS 'channel',
		COALESCE(results.inner_effective_date, GETDATE()) AS 'effectiveDate',
		pbc.Cost AS 'regularPrice'
		FROM mmc.dbo.Pricebook_Cost pbc WITH(NOLOCK)
		INNER JOIN mmc.product.product p WITH (NOLOCK)
		ON pbc.UniqueId = p.uniqueId
		LEFT JOIN (
		SELECT
		pbcl.UniqueId AS 'inner_sku',
		pbcl.PriceBookId AS 'inner_channel_id',
		pbcl.Update_DateTime AS 'inner_effective_date',
		ROW_NUMBER() OVER (PARTITION BY pbcl.uniqueId, pbcl.priceBookId ORDER BY pbcl.Update_DateTime DESC) as 'rank'
		FROM mmc.dbo.PriceBook_Cost_Log pbcl WITH (NOLOCK)
		INNER JOIN mmc.product.product p WITH(NOLOCK)
		ON pbcl.UniqueId = p.uniqueId
		INNER JOIN mmc.product.family f WITH(NOLOCK)
		ON p.familyId = f.id
		INNER JOIN mmc.product.containerType ct WITH(NOLOCK)
		ON f.containerTypeId = ct.id
		WHERE pbcl.PriceBookId IN (1, 22, 25)
		AND ct.type = 'Product'
		<if test="date != null">
			AND pbcl.Update_DateTime &gt;= @startDate
		</if>
		) results
		ON pbc.UniqueId = results.inner_sku
		AND pbc.PriceBookId = results.inner_channel_id
		AND results.rank = 1
		WHERE pbc.PricebookId IN (1,22,25)
	</select>

	<resultMap id="wiserPerformanceDataMap" type="WiserPerformanceData">
		<result property="sku" column="sku" />
		<result property="transactionDate" column="transactionDate" />
		<result property="grossUnits" column="grossUnits" />
		<result property="grossOrders" column="grossOrders" />
		<result property="grossRevenue" column="grossRevenue" />
		<result property="channel" column="channel" />
		<result property="ncr" column="ncr" />
		<result property="marketplaceId" column="marketplaceId" />
	</resultMap>

	<select id="getWiserPerformanceData" resultMap="wiserPerformanceDataMap">
		DECLARE @date DATETIME = #{date};

		DECLARE @startDate DATETIME = DATEADD(day, DATEDIFF(day, 0, @date), 0);
		DECLARE @endDate DATETIME = DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0);

		SELECT
			c.uniqueId AS 'sku',
			DATEADD(day, DATEDIFF(day, 0, o.placedDate), 0) AS 'transactionDate',
			SUM(c.quantity) AS 'grossUnits',
			COUNT(*) AS 'grossOrders',
			SUM(ROUND(c.unitPrice, 2) * quantity) AS 'grossRevenue',
			ISNULL(u.priceBookId, 1) AS 'channel',
			IIF(ncr.NoChargeReplacement_LogId IS NOT NULL, 1, 0) AS 'ncr',
			IIF(mo.marketplaceId IS NOT NULL, mo.marketplaceId, 0) as 'marketplaceId'
		FROM omc.dbo.cart c WITH (NOLOCK)
		INNER JOIN mmc.dbo.product p WITH (NOLOCK)
		ON c.uniqueId = p.uniqueId
		INNER JOIN omc.dbo.orders o WITH (NOLOCK)
		ON c.cart_orderNumber = o.ordernumber
		INNER JOIN omc.dbo.userdb u WITH (NOLOCK)
		ON o.userDBID = u.userDBID
		LEFT JOIN omc.dbo.NoChargeReplacement_Log ncr WITH (NOLOCK)
		ON ncr.New_OrderNumber = o.ordernumber
		LEFT JOIN omc.dbo.marketplace_order mo WITH (NOLOCK)
		ON mo.orderNumber = o.ordernumber
        WHERE o.placedDate &gt;= @startDate
        AND o.placedDate &lt; @endDate
		AND ISNULL(u.priceBookId, 1) IN (1, 22, 25)
		AND p.containerType = 'Product'
		AND o.status != 'cancelled'
		GROUP BY c.uniqueId, ISNULL(u.priceBookId, 1), DATEADD(day, DATEDIFF(day, 0, o.placedDate), 0), IIF(mo.marketplaceId IS NOT NULL, mo.marketplaceId, 0), IIF(ncr.NoChargeReplacement_LogId IS NOT NULL, 1, 0)

		UNION ALL

		-- Cancelled Items: only items that were placed previously and got cancelled today
		-- Exclude items from orders that are placed and cancelled on the same date since we do not grab them from the select above

		SELECT
			c.uniqueId AS 'sku',
			DATEADD(day, DATEDIFF(day, 0, o.placedDate), 0) AS 'transactionDate',
			SUM(c.quantity * -1) AS 'grossUnits',
			(COUNT(*) * -1) AS 'grossOrders',
			SUM(ROUND(c.unitPrice, 2) * quantity * -1) AS 'grossRevenue',
			ISNULL(u.priceBookId, 1) AS 'channel',
			IIF(ncr.NoChargeReplacement_LogId IS NOT NULL, 1, 0) AS 'ncr',
			IIF(mo.marketplaceId IS NOT NULL, mo.marketplaceId, 0) as 'marketplaceId'
		FROM omc.dbo.cart c WITH (NOLOCK)
		INNER JOIN mmc.dbo.product p WITH (NOLOCK)
		ON c.uniqueId = p.uniqueId
		INNER JOIN omc.dbo.orders o WITH (NOLOCK)
		ON c.cart_orderNumber = o.ordernumber
		INNER JOIN omc.dbo.userdb u WITH (NOLOCK)
		ON o.userDBID = u.userDBID
		LEFT JOIN omc.dbo.NoChargeReplacement_Log ncr WITH (NOLOCK)
		ON ncr.New_OrderNumber = o.ordernumber
		LEFT JOIN omc.dbo.marketplace_order mo WITH (NOLOCK)
		ON mo.orderNumber = o.ordernumber
		LEFT JOIN omc.dbo.purchaseorders po WITH (NOLOCK)
		ON o.ordernumber = po.ordernumber
		LEFT JOIN omc.dbo.orderstatushistory h
		ON o.ordernumber = h.ordernumber
		WHERE
		o.status = 'cancelled'
		AND h.status = 'cancelled'
		AND (DATEADD(day, DATEDIFF(day, 0, po.cancelledDateTime), 0) &gt;= @startDate OR DATEADD(day, DATEDIFF(day, 0, h.ChangeDate), 0) &gt;= @startDate)
		AND (DATEADD(day, DATEDIFF(day, 0, po.cancelledDateTime), 0) &lt; @endDate OR DATEADD(day, DATEDIFF(day, 0, h.ChangeDate), 0) &lt; @endDate)
		AND (DATEADD(day, DATEDIFF(day, 0, po.cancelledDateTime), 0) != DATEADD(day, DATEDIFF(day, 0, o.placedDate), 0) OR DATEADD(day, DATEDIFF(day, 0, h.ChangeDate), 0) != DATEADD(day, DATEDIFF(day, 0, o.placedDate), 0))
		AND ISNULL(u.priceBookId, 1) IN (1, 22, 25)
		AND p.containerType = 'Product'
		GROUP BY c.uniqueId, ISNULL(u.priceBookId, 1), DATEADD(day, DATEDIFF(day, 0, o.placedDate), 0), IIF(mo.marketplaceId IS NOT NULL, mo.marketplaceId, 0), IIF(ncr.NoChargeReplacement_LogId IS NOT NULL, 1, 0)
	</select>

	<resultMap id="wiserSaleMap" type="WiserSale">
		<result property="productUniqueId" column="productUniqueId" />
		<result property="startDate" column="startDate" />
		<result property="endDate" column="endDate" />
		<result property="modifiedDate" column="modifiedDate" />
	</resultMap>

	<select id="getParticipationProductSales" resultMap="wiserSaleMap">
		DECLARE @date DATETIME2 = #{date}

		;WITH ownedProducts AS (
		SELECT TOP (1) WITH TIES
		pp.uniqueId,
		pp.participationId,
		p.saleId,
		p.startDate,
		p.endDate,
		p.lastModifiedUserId AS userId
		FROM
		mmc.product.participationProduct AS pp
		INNER JOIN
		mmc.product.participationItemPartial AS p
		ON p.participationId = pp.participationId
		AND (p.startDate IS NULL OR p.startDate &lt;= @date)
		AND (p.endDate IS NULL OR p.endDate &gt; @date)
		ORDER BY
		ROW_NUMBER() OVER(PARTITION BY pp.uniqueId ORDER BY p.startDate DESC)
		)

		SELECT DISTINCT
		uniqueId as productUniqueId,
		startDate,
		endDate,
		@date as modifiedDate
		FROM
		ownedProducts AS pp
		INNER JOIN
		mmc.product.participationCalculatedDiscount AS d
		ON d.participationId = pp.participationId
	</select>
</mapper>